// Code generated by mockery v2.45.1. DO NOT EDIT.

package service_test

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "github.com/LLIEPJIOK/orderserver/internal/models"
)

// MockOrderRepository is an autogenerated mock type for the OrderRepository type
type MockOrderRepository struct {
	mock.Mock
}

// CreateOrder provides a mock function with given fields: ctx, item, quantity
func (_m *MockOrderRepository) CreateOrder(ctx context.Context, item string, quantity int32) (*models.Order, error) {
	ret := _m.Called(ctx, item, quantity)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrder")
	}

	var r0 *models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int32) (*models.Order, error)); ok {
		return rf(ctx, item, quantity)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int32) *models.Order); ok {
		r0 = rf(ctx, item, quantity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int32) error); ok {
		r1 = rf(ctx, item, quantity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteOrder provides a mock function with given fields: ctx, id
func (_m *MockOrderRepository) DeleteOrder(ctx context.Context, id string) (*models.Order, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrder")
	}

	var r0 *models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Order, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Order); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrder provides a mock function with given fields: ctx, id
func (_m *MockOrderRepository) GetOrder(ctx context.Context, id string) (*models.Order, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetOrder")
	}

	var r0 *models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Order, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Order); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOrders provides a mock function with given fields: ctx
func (_m *MockOrderRepository) ListOrders(ctx context.Context) ([]*models.Order, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListOrders")
	}

	var r0 []*models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*models.Order, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*models.Order); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrder provides a mock function with given fields: ctx, id, item, quantity
func (_m *MockOrderRepository) UpdateOrder(ctx context.Context, id string, item string, quantity int32) (*models.Order, error) {
	ret := _m.Called(ctx, id, item, quantity)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrder")
	}

	var r0 *models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int32) (*models.Order, error)); ok {
		return rf(ctx, id, item, quantity)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int32) *models.Order); ok {
		r0 = rf(ctx, id, item, quantity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, int32) error); ok {
		r1 = rf(ctx, id, item, quantity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockOrderRepository creates a new instance of MockOrderRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOrderRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOrderRepository {
	mock := &MockOrderRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
